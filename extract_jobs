#!/bin/bash

if [ "$#" -lt 1 ]; then
	echo "Syntax: ./extract_jobs parameter_file"
	exit
fi

filename="$1"
i=1

c0_flag=0
k_flag=0
kb_flag=0

while read -r line ; do
	[[ "$line" =~ ^#.*$ ]] && continue
	name="$line"
	n_words=$(echo $name | wc -w)
	if [ "$n_words" -lt 3 ]; then
		echo "Wrong syntax in file $filename. Exiting."
		exit
	fi
	case $i in
		1) 	c0_i=$(echo $name | cut --delimiter=" " -f1)
			c0_f=$(echo $name | cut --delimiter=" " -f2)
			n_c0=$(echo $name | cut --delimiter=" " -f3)
			rpp=$(echo $name | cut --delimiter=" " -f4);;
		2) 	k_i=$(echo $name | cut --delimiter=" " -f1)
			k_f=$(echo $name | cut --delimiter=" " -f2)
			n_k=$(echo $name | cut --delimiter=" " -f3);;
		3) 	kb_i=$(echo $name | cut --delimiter=" " -f1)
			kb_f=$(echo $name | cut --delimiter=" " -f2)
			n_kb=$(echo $name | cut --delimiter=" " -f3);;
	esac
	let i=i+1
	if [ "$i" -gt 3 ]; then
		if (( $(echo "$c0_f <= $c0_i" | bc -l) )); then
			n_c0=1
			c0_flag=1
		fi
		if (( $(echo "$k_f <= $k_i" | bc -l) )); then
			n_k=1
			k_flag=1
		fi
		if (( $(echo "$kb_f <= $kb_i" | bc -l) )); then
			n_kb=1
			kb_flag=1
		fi
		echo "Successfully read file: 	$filename"
		echo "Concentration ($c0_i,$c0_f,$n_c0); Bending ($k_i,$k_f,$n_k); Splay ($kb_i,$kb_f,$n_kb); Run per point $rpp"
		let tot="($n_c0+1-$c0_flag)*($n_k+1-$k_flag)*($n_kb+1-$kb_flag)*$rpp"
		echo "Total simulations: $tot"
		break
	fi
done < "$filename"

rm -fR testconf
mkdir -p testconf


# Re-initialising counters
c0_c=0
k_c=0
kb_c=0
rpp_c=0
njob=1

while [ $k_c -le $n_k ];
	do
	k=$(echo "scale=3; $k_i+$k_f*$k_c/$n_k-$k_i*$k_c/$n_k" | bc -l )
	while [ $kb_c -le $n_kb ];
		do
		kb=$(echo "scale=3; ($kb_i)+$kb_f*$kb_c/$n_kb-($kb_i)*$kb_c/$n_kb" | bc -l )
		while [  $c0_c -le $n_c0 ]; 
			do
			while [  $rpp_c -lt $rpp ]; 
				do
				c0=$(echo "scale=3; $c0_i+$c0_f*$c0_c/$n_c0-$c0_i*$c0_c/$n_c0" | bc -l )
				jobp=$(echo "scale=2; 100*$njob/$tot" | bc -l )
				echo -ne "Processing ($k,$kb,$c0,$rpp_c) and found $njob/$tot ($jobp%)"  \\r

				DIR=temp_${k}_${kb}_${c0}_${rpp_c}

				if [ -d "$DIR" ]; then
					if [ -e "$DIR/last.dat" ]; then
						let njob=njob+1
						cp $DIR/last.dat testconf/conf_${k}_${kb}_${c0}_${rpp_c}_last.dat
						cat $DIR/final.dat | awk -v var1="$k" -v var2="$kb" -v var3="$c0" -F"\t" '{print var1,"\t", var2,"\t", var3,"\t", $2,"\t", $3,"\t", $4,"\t", $5,"\t", $6,"\t", $7,"\t", $8,"\t", $9,"\t", $1}'  >> testconf/final.dat
					fi
				fi

				let rpp_c=rpp_c+1
			done 
			rpp_c=0
			let c0_c=c0_c+1 
			if [ "$c0_flag" -gt 0 ]; then
				break
			fi 
		done
		c0_c=0
		let kb_c=kb_c+1
		if [ "$kb_flag" -gt 0 ]; then
			break
		fi 
	done
	kb_c=0
	let k_c=k_c+1
	if [ "$k_flag" -gt 0 ]; then
		break
	fi 
done

echo ""
echo "Found $njob (of $tot) directories  with useful data"
